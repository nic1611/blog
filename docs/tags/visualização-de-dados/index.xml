<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visualização de dados on Q.G do Tux</title>
    <link>https://nic1611.github.io/blog/tags/visualiza%C3%A7%C3%A3o-de-dados/</link>
    <description>Recent content in Visualização de dados on Q.G do Tux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://nic1611.github.io/blog/tags/visualiza%C3%A7%C3%A3o-de-dados/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução a visualização com Matplotlib</title>
      <link>https://nic1611.github.io/blog/post/introducao_ao_matplotlib/</link>
      <pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nic1611.github.io/blog/post/introducao_ao_matplotlib/</guid>
      <description>Introdução O matplotlib é uma biblioteca para gerar gráficos ( plots ) em Python, inclusive em 3 dimensões. Abaixo um exemplo de como plotar um gráfico com matplotlib. Primeiramente importamos a interface baseada em estados ( pyplot ) do matplotlib. O padrão da comunidade é usar o alias plt :
from matplotlib import pyplot as plt import math import numpy as np Então, definimos uma sequencia de valores (em uma lista) a serem impressos.</description>
    </item>
    
    <item>
      <title>Visualização de dados com R</title>
      <link>https://nic1611.github.io/blog/post/visualizacao_de_dados_com_o_r/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nic1611.github.io/blog/post/visualizacao_de_dados_com_o_r/</guid>
      <description>Visualização de dados O objetivo aqui é apresentar vários exemplos práticos de construção de gráficos comuns e o ferramental necessáriopara criar boas visualizações.Para isso, a partir dessa seção iremos usar o arquivo .csv sobre a circulação das moedas, considerando a execução do seguinte código abaixo:
library(tidyverse) circulacao_dinheiro &amp;lt;- read_csv2(&amp;#34;./MeioCirculante_DadosAbertos.csv&amp;#34;, col_names = c(&amp;#34;Data&amp;#34;, &amp;#34;Família&amp;#34;, &amp;#34;Denominação&amp;#34;, &amp;#34;Quantidade&amp;#34;)) #lembre-se o segredo é sempre preparar os dados de maneira que o subconjunto selecionado responda apergunta disposta #os grupos que queremos no final é por MÊS e DENOMINAÇÃO junto com a quantidade MÉDIA em circulação#seguindo a especificação, podemos definir o seguinte tibble resultante: moedas_2019 &amp;lt;- mutate(circulacao_dinheiro, Dia = as.</description>
    </item>
    
    <item>
      <title>Introdução a visualização de dados</title>
      <link>https://nic1611.github.io/blog/post/introducao_visualizacao/</link>
      <pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nic1611.github.io/blog/post/introducao_visualizacao/</guid>
      <description>Introdução a visualização de dados Iremos nos aventurar no mundo da visualização gráfica de dados usando o ggplot2 (já dentro do tidyverse). Este material temcomo objetivo introduzir alguns conceitos principais deste pacote e uma visão inicial de como gerar os principais tipos de gráficos,usando o nosso tibble chamado circulacao_dinheiro_detalhado que é formado a seguir
# library(tidyverse) circulacao_dinheiro &amp;lt;- read_csv2(&amp;#34;./MeioCirculante_DadosAbertos.csv&amp;#34;, col_names = c(&amp;#34;Data&amp;#34;, &amp;#34;Família&amp;#34;, &amp;#34;Denominação&amp;#34;, &amp;#34;Quantidade&amp;#34;)) circulacao_dinheiro_detalhado &amp;lt;- mutate(circulacao_dinheiro, Dia = as.</description>
    </item>
    
  </channel>
</rss>
